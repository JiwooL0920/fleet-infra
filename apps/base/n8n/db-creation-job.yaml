---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: db-creator
  namespace: n8n
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: db-creator
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: db-creator-n8n
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: db-creator
subjects:
- kind: ServiceAccount
  name: db-creator
  namespace: n8n
---
apiVersion: batch/v1
kind: Job
metadata:
  name: n8n-db-creator
  namespace: n8n
spec:
  template:
    spec:
      serviceAccountName: db-creator
      restartPolicy: OnFailure
      containers:
      - name: db-creator
        image: postgres:16
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Creating n8n database if it doesn't exist..."
          
          # Wait for source secret to be available
          until kubectl get secret postgresql-cluster-app -n cnpg-system; do
            echo "Waiting for postgresql-cluster-app secret..."
            sleep 5
          done
          
          # Extract database credentials
          export PGHOST="postgresql-cluster-rw.cnpg-system.svc.cluster.local"
          export PGPORT="5432"
          export PGUSER=$(kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.username}' | base64 -d)
          export PGPASSWORD=$(kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.password}' | base64 -d)
          
          # Connect to the 'app' database (which exists) and create 'n8n' database if needed
          psql -d app -c "SELECT 1 FROM pg_database WHERE datname = 'n8n'" | grep -q 1 || \
          psql -d app -c "CREATE DATABASE n8n OWNER ${PGUSER};"
          
          echo "n8n database created or already exists"