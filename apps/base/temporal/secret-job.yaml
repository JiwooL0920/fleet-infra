---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-creator
  namespace: temporal
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-creator-temporal
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-creator-temporal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secret-creator-temporal
subjects:
- kind: ServiceAccount
  name: secret-creator
  namespace: temporal
---
apiVersion: batch/v1
kind: Job
metadata:
  name: temporal-postgres-secret-creator
  namespace: temporal
spec:
  template:
    spec:
      serviceAccountName: secret-creator
      restartPolicy: OnFailure
      containers:
      - name: secret-creator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Creating temporal-postgresql-secret secret..."
          
          # Wait for source secret to be available
          until kubectl get secret postgresql-cluster-app -n cnpg-system; do
            echo "Waiting for postgresql-cluster-app secret..."
            sleep 5
          done
          
          # Extract password from PostgreSQL secret (Temporal expects just the password)
          POSTGRES_PASSWORD=$(kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.password}' | base64 -d)
          
          # Create the secret for Temporal (with password key as expected by Temporal)
          kubectl create secret generic temporal-postgresql-secret \
            --from-literal=password="$POSTGRES_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "temporal-postgresql-secret secret created successfully"