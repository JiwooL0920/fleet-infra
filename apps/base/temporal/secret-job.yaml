---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-creator
  namespace: temporal
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-creator-temporal
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: secret-creator-temporal
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secret-creator-temporal
subjects:
- kind: ServiceAccount
  name: secret-creator
  namespace: temporal
---
apiVersion: batch/v1
kind: Job
metadata:
  name: temporal-postgres-secret-creator
  namespace: temporal
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: secret-creator
      restartPolicy: OnFailure
      containers:
      - name: secret-creator
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Creating temporal-postgresql-secret secret..."
          
          # Wait for source secret to be available with timeout
          echo "Waiting for postgresql-cluster-app secret to be available..."
          timeout=300
          counter=0
          until kubectl get secret postgresql-cluster-app -n cnpg-system >/dev/null 2>&1; do
            if [ $counter -ge $timeout ]; then
              echo "Timeout waiting for postgresql-cluster-app secret"
              exit 1
            fi
            echo "Waiting for postgresql-cluster-app secret... ($counter/$timeout)"
            sleep 5
            counter=$((counter + 5))
          done
          
          # Verify the secret has the expected keys
          echo "Verifying postgresql-cluster-app secret has required keys..."
          kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.username}' >/dev/null
          kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.password}' >/dev/null
          
          # Extract username and password from PostgreSQL secret
          echo "Extracting credentials from postgresql-cluster-app secret..."
          POSTGRES_USERNAME=$(kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.username}' | base64 -d)
          POSTGRES_PASSWORD=$(kubectl get secret postgresql-cluster-app -n cnpg-system -o jsonpath='{.data.password}' | base64 -d)
          
          # Validate credentials are not empty
          if [ -z "$POSTGRES_USERNAME" ] || [ -z "$POSTGRES_PASSWORD" ]; then
            echo "Error: Username or password is empty"
            exit 1
          fi
          
          echo "Creating temporal-postgresql-secret with extracted credentials..."
          # Create the secret for Temporal with all needed keys
          kubectl create secret generic temporal-postgresql-secret \
            --from-literal=username="$POSTGRES_USERNAME" \
            --from-literal=password="$POSTGRES_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Verify the secret was created successfully
          echo "Verifying temporal-postgresql-secret was created..."
          kubectl get secret temporal-postgresql-secret -n temporal >/dev/null
          
          echo "temporal-postgresql-secret created successfully!"
          echo "Username: $POSTGRES_USERNAME"
          echo "Password length: ${#POSTGRES_PASSWORD} characters"