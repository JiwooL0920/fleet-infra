apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: cnpg
  namespace: flux-system
spec:
  interval: 1m
  url: https://cloudnative-pg.github.io/charts
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: cloudnative-pg
  namespace: flux-system
spec:
  interval: 1m
  releaseName: cloudnative-pg
  targetNamespace: cnpg-system
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  chart:
    spec:
      chart: cloudnative-pg
      version: 0.24.0
      sourceRef:
        kind: HelmRepository
        name: cnpg
        namespace: flux-system
      interval: 1m
  values:
    # Enable monitoring
    monitoring:
      enabled: false
      podMonitor:
        enabled: false
    
    # Resource limits for the operator
    resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        memory: "256Mi"
        cpu: "100m"
    
    # Enable CRDs
    crds:
      create: true
    
    # Webhook configuration
    webhook:
      port: 9443
      mutatingWebhook:
        create: true
      validatingWebhook:
        create: true
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: postgresql-cluster
  namespace: flux-system
spec:
  interval: 1m
  releaseName: postgresql-cluster
  targetNamespace: cnpg-system
  dependsOn:
    - name: cloudnative-pg
      namespace: flux-system
    - name: localstack
      namespace: flux-system
  install:
    timeout: 15m
    remediation:
      retries: 3
  upgrade:
    timeout: 15m
    remediation:
      retries: 3
  chart:
    spec:
      chart: cluster
      version: 0.3.1
      sourceRef:
        kind: HelmRepository
        name: cnpg
        namespace: flux-system
      interval: 1m
  values:
    # Cluster configuration
    type: postgresql
    
    # PostgreSQL version
    version:
      postgresql: "16"
    
    # Cluster mode (standalone, replica, recovery)
    mode: standalone
    
    # Cluster specifications
    cluster:
      instances: 3
      
      # PostgreSQL configuration
      postgresql:
        parameters:
          max_connections: "200"
          shared_buffers: "256MB"
          effective_cache_size: "1GB"
          maintenance_work_mem: "64MB"
          checkpoint_completion_target: "0.9"
          wal_buffers: "16MB"
          default_statistics_target: "100"
          random_page_cost: "1.1"
          effective_io_concurrency: "200"
          work_mem: "4MB"
          min_wal_size: "1GB"
          max_wal_size: "4GB"
      
      # Resource configuration
      resources:
        requests:
          memory: "512Mi"
          cpu: "500m"
        limits:
          memory: "1Gi"
          cpu: "1000m"
      
      # Storage configuration
      storage:
        size: "5Gi"
        storageClass: "standard"
      
      # Monitoring configuration
      monitoring:
        enabled: false
        podMonitor:
          enabled: false
        prometheusRule:
          enabled: false
    
    # Backup configuration
    backups:
      enabled: true
      provider: s3
      # Override default S3 endpoint to use localstack
      endpointURL: "http://localstack.localstack.svc.cluster.local:4566"
      # S3 bucket path
      destinationPath: "s3://cnpg-backup/"
      # Retention policy for backups
      retentionPolicy: "30d"
      # S3 configuration
      s3:
        bucket: "cnpg-backup"
        region: "us-east-1"
        accessKey: "localstack"
        secretKey: "localstack"
        # LocalStack specific options
        forcePathStyle: true
        disableSSL: true
      # Scheduled backup configuration
      scheduledBackups:
        - name: daily-backup
          schedule: "0 0 2 * * *"  # Daily at 2:00 AM UTC (second minute hour day month weekday)
          backupOwnerReference: self
          method: barmanObjectStore
    
    # Database and user configuration
    database:
      name: appdb
      owner: appuser
    
    # Service configuration
    service:
      type: ClusterIP
      
    # Bootstrap configuration
    bootstrap:
      initdb:
        database: appdb
        owner: appuser
        # Create additional databases using post-init SQL
        postInitSQL:
          - CREATE DATABASE temporal OWNER appuser;
          - CREATE DATABASE temporal_visibility OWNER appuser;
          - GRANT ALL PRIVILEGES ON DATABASE temporal TO appuser;
          - GRANT ALL PRIVILEGES ON DATABASE temporal_visibility TO appuser;
